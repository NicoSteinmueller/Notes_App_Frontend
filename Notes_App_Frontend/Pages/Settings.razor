@page "/settings"
@using System.Text.Json
@using System.Net
@using System.Net.Http.Headers
@using System.Runtime.InteropServices.JavaScript
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using MudBlazor
@using Notes_App_Frontend.Models
@using Notes_App_Frontend.Service
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@layout MainLayout
@inject HttpClient HttpClient;
@inject IUser User;
@inject IUserService UserService;
@inject ISnackbar Snackbar;

<MudLayout>
    <MudMainContent>
        <MudText Class="pt-5"Typo="Typo.h4">Settings</MudText>
        
        <MudForm  @bind-IsValid="@_saveUnlock">
            <MudTextField T="string" Label="first Name" @bind-Value="User.FirstName" Required="true" RequiredError="first name is required!"/>
            <MudTextField T="string" Label="last Name" @bind-Value="User.LastName" Required="true" RequiredError="last name is required!"/>
            <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!" @bind-Value="User.email"
                          Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"/>
                            
        </MudForm>
        
        
        <MudStack Class="pt-5" AlignItems="AlignItems.Start">
            <MudSwitch LabelPosition="LabelPosition.Start" Color="Color.Primary" T="bool" Label="Toggle Light/Dark Mode"/>
        </MudStack>
        <MudSelect @bind-Value="@User.Settings.Language">
            <MudSelectItem Value="@Language.GERMAN">@Language.GERMAN</MudSelectItem>
            <MudSelectItem Value="@Language.ENGLISH">@Language.ENGLISH</MudSelectItem>
        </MudSelect>
        @if (_saveError)
        {
            <MudAlert Severity="Severity.Error"> Save failed!</MudAlert>
        }
        
        <MudButton OnClick="@SaveSettings">Save</MudButton>

        <MudSpacer/>
        <MudText Class="pt-5" Typo="Typo.h4">Change password</MudText>
        <MudForm @ref="_form" @bind-IsValid="@_changePasswordUnlock">
              <MudTextField T="string" Label="current Password"  HelperText="Input our current password" @ref="_oldPassword"
                                      InputType="InputType.Password"
                                      Required="true"
                                      RequiredError="Password is required!"/>
            <MudTextField T="string" Label="new Password" HelperText="Choose a strong password" @ref="_newPassword"
                          InputType="InputType.Password"
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                          RequiredError="Password is required!"/>
            <MudTextField T="string"
                          Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                          Validation="@(new Func<string, string>(PasswordMatch))"/>
            @if (_changePasswordError)
            {
                <MudAlert Severity="Severity.Error"> Password change failed!</MudAlert>
            }
            
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_changePasswordUnlock)" Class="ml-auto" OnClick="@ChangePassword">Change Password</MudButton>
            
        </MudForm>

        
    </MudMainContent>
</MudLayout>



@code
{
    [Inject]
    private ProtectedLocalStorage BrowserSettings { get; set; }

    private bool _saveError;
    private bool _saveUnlock = true;

    bool _changePasswordError;
    bool _changePasswordUnlock;
    MudTextField<string> _newPassword;
    MudTextField<string> _oldPassword;
    MudForm _form;

    
    private async void SaveSettings()
    {
        if (!_saveUnlock)
        {
            _saveError = true;
            return;
        }
        _saveError = !await UserService.saveUser();
        if (!_saveError)
        {
            var loginModel = await BrowserSettings.GetAsync<LoginModel>("Notes_App_Auth");
            if (loginModel.Success)
            {
                await BrowserSettings.SetAsync("Notes_App_Auth", new LoginModel { Email = User.email, Password = loginModel.Value.Password });
            }
            Snackbar.Add("Settings saved");
            StateHasChanged();
        }
    }

    private async void ChangePassword()
    {
        var changePasswordApi = new ChangePasswordApi(_oldPassword.Value, _newPassword.Value);
        _changePasswordError = !await UserService.changePassword(changePasswordApi);
        
        if (!_changePasswordError)
        {
            await BrowserSettings.SetAsync("Notes_App_Auth", new LoginModel { Email = User.email, Password = _newPassword.Value });
            Snackbar.Add("Password changed");
        }
    }
    
    
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (_newPassword.Value != arg)
            return "Passwords don't match";
        return null;
    }
    
}

