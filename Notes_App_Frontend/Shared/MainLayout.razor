@using MudBlazor
@using Index = Notes_App_Frontend.Pages.Login
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Notes_App_Frontend.Models
@using Notes_App_Frontend.Service
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IUser User
@inject IAuthentication Authentication
@inject IUserService UserService
@inject IMenuSettings MenuSettings
@inherits LayoutComponentBase


<PageTitle>Notes App</PageTitle>
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="customTheme"/>
<MudDialogProvider />
<MudSnackbarProvider />
@if (User.IsAuthenticated)
    {
<MudLayout>
    
        <MudAppBar Elevation="0">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
            <MudSpacer/>
            <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank"/>
            <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="@Logout" Target="_blank"/>
        </MudAppBar>
        <MudDrawer @bind-Open="@openDrawer" Elevation="1">
            <MudNavMenu Class="mud-width-full">
                <MudText Typo="Typo.h6" Class="px-4 py-1">@User.FirstName @User.LastName</MudText>
                <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">@User.email</MudText>
                <MudDivider Class="my-2"/>
                <MudNavLink Href="/dashboard" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
                <MudStack AlignItems="AlignItems.Start" Class="pl-1">
                                       <MudCheckBox @bind-Checked="MenuSettings.FavoritesOnly">
                                           <MudText Typo="Typo.body2">Favorites only</MudText>
                                       </MudCheckBox>
                                   </MudStack>
                                   
                <MudNavLink Href="/settings" Icon="@Icons.Material.Filled.Settings" >Settings</MudNavLink>
            </MudNavMenu>

            
        </MudDrawer>
   
    
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-0 pt-0">
            @Body
        </MudContainer>
  

</MudLayout>

 }
else
{

    <MudLayout>
        <MudContainer Class="d-flex align-center flex-grow-1 gap-4" Elevation="0">
            @Body
        </MudContainer>
    </MudLayout>
    
}


@code {
    bool openDrawer;
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;
    
    void ToggleDrawer()
    {
        openDrawer = !openDrawer;
    }

    void Logout()
    {
        User.IsAuthenticated = false;
        User.Token = "";
        User.email = "";
        BrowserStorage.DeleteAsync("Notes_App_Token");
        BrowserStorage.DeleteAsync("Notes_App_Auth");
        StateHasChanged();
    }
    
    
    
        //overridden by ThemeProvider
    MudTheme customTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = Colors.Blue.Default,
            Secondary = Colors.Green.Accent4,
            AppbarBackground = Colors.Red.Default,
        },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Blue.Lighten1
        },

        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "260px",
            DrawerWidthRight = "300px"
        }
    };

    protected override void OnInitialized()
    {
        
    }

    [Inject] 
    private ProtectedLocalStorage BrowserStorage { get; set; }
    

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await BrowserStorage.GetAsync<string>("Notes_App_Token");
            if (!token.Success || !await Authentication.checkToken(token.Value))
            {
                var loginModel = await BrowserStorage.GetAsync<LoginModel>("Notes_App_Auth");

                if (!loginModel.Success || !await Authentication.login(loginModel.Value.Email, loginModel.Value.Password))
                {
                    User.IsAuthenticated = false;
                    
                    return;
                }
                
            }
            if (!await UserService.getUser())
            {
                User.IsAuthenticated = false;
                return;
            }
            BrowserStorage.SetAsync("Notes_App_Token", User.Token);
            User.IsAuthenticated = true;
            NavigationManager.NavigateTo("/dashboard");


            /* 
            User.IsAuthenticated = true;

            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            */
            StateHasChanged();
        }

        if (!User.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        

    }
    
    
    
    public bool isAuthenticated { get; set; }
}